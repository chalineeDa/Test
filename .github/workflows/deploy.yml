name: Track Daily Development Time

on:
  push:
    branches: [ main ] # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ deploy
  schedule:
    - cron: '0 17 * * 1-5' # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤ 17:00 ‡∏ô. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ deploy

jobs:
  track-dev-time:
    runs-on: ubuntu-latest
    steps:
      # 1. Login to Jira
      - name: Login to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      
      # 2. Checkout code with full history
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # 3. Find Jira issue from branch name or commit message
      - name: Find Jira issue
        id: find_issue
        run: |
          # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ branch ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          BRANCH_NAME=$(git branch --show-current)
          
          # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏´‡∏±‡∏™ Jira ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠ branch ‡∏´‡∏£‡∏∑‡∏≠ commit message
          if [[ $BRANCH_NAME =~ ([A-Z]+-[0-9]+) ]]; then
            ISSUE_KEY="${BASH_REMATCH[1]}"
          elif [[ "${{ github.event.head_commit.message }}" =~ ([A-Z]+-[0-9]+) ]]; then
            ISSUE_KEY="${BASH_REMATCH[1]}"
          else
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™ issue ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
            echo "No Jira issue found in branch name or commit message"
            exit 0
          fi
          
          echo "Found Jira issue: $ISSUE_KEY"
          echo "issue=$ISSUE_KEY" >> $GITHUB_OUTPUT
      
      # 4. Calculate work time for today only
      - name: Calculate today's work time
        id: calc_time
        if: steps.find_issue.outputs.issue != ''
        run: |
          ISSUE_KEY="${{ steps.find_issue.outputs.issue }}"
          
          # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ deploy ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤
          if [[ "${{ github.event_name }}" == "push" ]]; then
            IS_DEPLOY=true
            echo "This is a deployment event"
          else
            IS_DEPLOY=false
            echo "This is a scheduled check (no deployment)"
          fi
          
          # ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (00:00:00)
          TODAY_START=$(date -d "today 00:00:00" +%s)
          
          # ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          CURRENT_TIME=$(date +%s)
          
          # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á branch
          BRANCH_NAME=$(git branch --show-current)
          BRANCH_CREATED=$(git log --follow --date=unix --format=%cd $BRANCH_NAME | tail -1)
          
          echo "Branch created at: $(date -d @$BRANCH_CREATED)"
          echo "Today starts at: $(date -d @$TODAY_START)"
          
          # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ branch ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if [[ $BRANCH_CREATED -ge $TODAY_START ]]; then
            # Branch ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ - ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á branch
            START_TIME=$BRANCH_CREATED
            echo "Branch was created today, using branch creation time"
          else
            # Branch ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ - ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
            START_TIME=$TODAY_START
            echo "Branch was created before today, using start of today"
          fi
          
          # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏≤‡∏ó‡∏µ
          MINUTES=$(( ($CURRENT_TIME - $START_TIME) / 60 ))
          HOURS=$(( $MINUTES / 60 ))
          REMAINING_MINUTES=$(( $MINUTES % 60 ))
          
          # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Jira worklog
          if [ $HOURS -gt 0 ]; then
            TIME_SPENT="${HOURS}h ${REMAINING_MINUTES}m"
          else
            TIME_SPENT="${MINUTES}m"
          fi
          
          # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö worklog
          if [[ "$IS_DEPLOY" == "true" ]]; then
            COMMENT="üöÄ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£ deploy: $TIME_SPENT"
          else
            COMMENT="üïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: $TIME_SPENT (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)"
          fi
          
          echo "time_spent=$TIME_SPENT" >> $GITHUB_OUTPUT
          echo "started=$(date -u -d "@$START_TIME" +"%Y-%m-%dT%H:%M:%S.000+0000")" >> $GITHUB_OUTPUT
          echo "comment=$COMMENT" >> $GITHUB_OUTPUT
      
      # 5. Add worklog to Jira
      - name: Add worklog to Jira
        if: steps.find_issue.outputs.issue != ''
        run: |
          ISSUE_KEY="${{ steps.find_issue.outputs.issue }}"
          
          # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Jira
          curl --request POST \
            --url "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/${ISSUE_KEY}/worklog" \
            --user "${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data '{
              "timeSpent": "${{ steps.calc_time.outputs.time_spent }}",
              "comment": {
                "type": "doc",
                "version": 1,
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "${{ steps.calc_time.outputs.comment }} (‡πÇ‡∏î‡∏¢ ${{ github.actor }})"
                      }
                    ]
                  }
                ]
              },
              "started": "${{ steps.calc_time.outputs.started }}"
            }'
